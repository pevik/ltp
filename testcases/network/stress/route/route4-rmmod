#!/bin/sh
# Copyright (c) International Business Machines  Corp., 2006
# Copyright (c) 2017 Petr Vorel <pvorel@suse.cz>
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License as
# published by the Free Software Foundation; either version 2 of
# the License, or (at your option) any later version.
#
# This program is distributed in the hope that it would be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.
#
# Setup: testcases/network/stress/README
#
# Author: Mitsuru Chinen <mitch@jp.ibm.com>

TST_TOTAL=2

. route4-lib.sh

TST_CLEANUP="do_cleanup"

do_cleanup()
{
	if [ -n "$MODULE" ]; then
		modprobe $MODULE
		tst_sleep 100ms
	fi
	netstress_cleanup
	restore_ipaddr
}

do_setup()
{
	local ifname module

	route_setup

	tst_check_cmds ethtool

	tst_add_ipaddr_stress

	# module driver of tested interface
	MODULE="$(ethtool -i $(tst_iface) | grep driver | sed 's/driver:[[:blank:]]*//')"

	# Check the other active interface uses the same driver
	for ifname in $(ifconfig | grep ^eth | awk '{ print $1}'); do
		[ "$(tst_iface)" = "$ifname" ] && continue
		[ "$ifname" = 'lo' ] && continue

		module="$(ethtool -i $ifname | grep driver | sed 's/driver:[[:blank:]]*//')"
		[ "$module" = "$MODULE" ] && \
			tst_brkm TCONF "an active interface '$ifname' uses the same network driver '$MODULE' with the test interface '$(tst_iface)'"
	done
}

test_body()
{
	local cmd_type=$1
	local cmd_name="$(get_cmd $cmd_type)"
	local dst_addr=${DST_NETWORK}.${DST_HOST}
	local dst_network=${DST_NETWORK}.0
	local cnt=0

	tst_resm TINFO "IPv4 route is added by '$cmd_name' command and then deleted by removing network driver $NS_TIMES times"

	while [ $cnt -lt $NS_TIMES ]; do
		make_background_tcp_traffic $(tst_ipaddr_un_ip)

		check_connectivity_interval $cnt false $(tst_iface) $(tst_ipaddr_un_host rhost) || return

		# Remove and reload the network driver
		modprobe -r $MODULE
		if [ $? -ne 0 ]; then
			tst_resm TFAIL "failed to remove the network driver '$MODULE'"
			return
		fi

		modprobe $MODULE
		if [ $? -ne 0 ]; then
			tst_resm TFAIL "failed to load the network driver '$MODULE'"
			return
		fi

		tst_sleep 100ms

		# If we use netns we need to reset it as unloading kernel module breaks it
		reset_ltp_netspace

		tst_add_ipaddr_stress

		cnt=$(($cnt + 1))
	done

	tst_resm TPASS "test is finished correctly"
}

do_setup
test_body 'rt_cmd'
test_body 'ip_cmd'

tst_exit
