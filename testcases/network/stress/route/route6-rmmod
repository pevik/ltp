#!/bin/sh
# Copyright (c) International Business Machines  Corp., 2006
# Copyright (c) 2017 Petr Vorel <pvorel@suse.cz>
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License as
# published by the Free Software Foundation; either version 2 of
# the License, or (at your option) any later version.
#
# This program is distributed in the hope that it would be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.
#
# Setup: testcases/network/stress/README
#
# Author: Mitsuru Chinen <mitch@jp.ibm.com>

TST_TOTAL=2

. route4-lib.sh

TST_CLEANUP="route_cleanup"

<<<<<<< HEAD:testcases/network/stress/route/route6-rmmod
#-----------------------------------------------------------------------
#
# NAME:
#   do_cleanup
#
# DESCRIPTION:
#   Recover the tested interfaces
#
#-----------------------------------------------------------------------
do_cleanup()
{
    # Make sure to load the network driver
    if [ x${lhost_module} != x ]; then
	modprobe $lhost_module
    fi

    # Initialize the interfaces
    initialize_if lhost ${LINK_NUM}
    initialize_if rhost ${LINK_NUM}
}


#-----------------------------------------------------------------------
#
# NAME:
#   do_setup
#
# DESCRIPTION:
#   Make a IPv6 connectivity
#
#-----------------------------------------------------------------------
do_setup()
{
    # Check the local host has ethtool utility
    which ethtool >/dev/null
    if [ $? -ne 0 ]; then
	tst_resm TBROK "This test case requires ethtool utility"
	exit $TST_TOTAL
    fi

    # Make sure to clean up
    do_cleanup

    # Assign IPv6 address to the interface of the local host
    add_ipv6addr lhost ${LINK_NUM} ${IPV6_NETWORK} ${LHOST_IPV6_HOST}
    if [ $? -ne 0 ]; then
	tst_resm TBROK "Failed to assign an IPv6 address at the local host"
	return 1
    fi
    lhost_ipv6addr="${IPV6_NETWORK}:${LHOST_IPV6_HOST}"

    # Set IPv6 address to the interfaces of the remote host
    add_ipv6addr rhost ${LINK_NUM} ${IPV6_NETWORK} ${RHOST_IPV6_HOST}
    if [ $? -ne 0 ]; then
	tst_resm TBROK "Failed to add an IPv6 address the remote host"
	exit $TST_TOTAL
    fi
    rhost_ipv6addr="${IPV6_NETWORK}:${RHOST_IPV6_HOST}"

    # Get the Interface names
    lhost_ifname=`get_ifname lhost ${LINK_NUM}`
    if [ $? -ne 0 ]; then
	tst_resm TBROK "Failed to get the interface name at the local host"
	exit $TST_TOTAL
    fi

    rhost_ifname=`get_ifname rhost ${LINK_NUM}`
    if [ $? -ne 0 ]; then
	tst_resm TBROK "Failed to get the interface name at the remote host"
	exit $TST_TOTAL
    fi

    # Get the module name of the interface at the local host
    lhost_module=`ethtool -i $lhost_ifname | grep driver | sed "s/driver:[[:blank:]]*//"`

    # Chack the other active interface uses the same driver
    for ifname in `ifconfig | grep ^eth | awk '{ print $1}'`; do
	if [ $lhost_ifname = $ifname ]; then
	    continue
	fi

	module=`ethtool -i $ifname | grep driver | sed "s/driver:[[:blank:]]*//"`
	if [ $lhost_module = $module ]; then
	    tst_resm TBROK "An active interface $ifname uses the same network deriver $module with the test intreface."
	    exit $TST_TOTAL
	fi
    done

    # Set the variables for destination network
    dst_addr=${DST_NETWORK}:${DST_HOST}
    dst_network=${DST_NETWORK}::
=======
do_setup()
{
	route_setup

	tst_add_ipaddr_stress
	tst_add_ipaddr_stress rhost
>>>>>>> network/stress: Fix and cleanup route IPv4 tests:testcases/network/stress/route/route4-ifdown
}

test_body()
{
<<<<<<< HEAD:testcases/network/stress/route/route6-rmmod
    test_type=$1

    TCID=route6-rmmod0${test_type}
    TST_COUNT=$test_type

    case $test_type in
	1)
	tst_resm TINFO "Verify the kernel is not crashed when IPv6 route is add by route command then it is deleted by removing network driver in $NS_TIMES times"
	;;
	2)
	tst_resm TINFO "Verify the kernel is not crashed when IPv6 route is add by ip command then it is deleted by removing network driver in $NS_TIMES times"
	;;
	*)
	tst_resm TBROK "unspecified case"
	return 1
	;;
    esac

    # Start the loop
    cnt=0
    while [ $cnt -lt $NS_TIMES ]; do
	# Check the connectivity to the gateway
	check_icmpv6_connectivity $lhost_ifname $rhost_ipv6addr
	if [ $? -ne 0 ]; then
	    tst_resm TBROK "Test Link $LINK_NUM is somthing wrong."
	    return 1
	fi

	# Add the route
	case $test_type in
	    1)
	    route -A inet6 add ${dst_network}/64 gw $rhost_ipv6addr dev $lhost_ifname
	    ;;
	    2)
	    ip -f inet6 route add ${dst_network}/64 via $rhost_ipv6addr dev $lhost_ifname
	    ;;
	esac
	if [ $? -ne 0 ]; then
	    tst_resm TFAIL "Failed to add the route to ${dst_network}/64"
	    return 1
	fi

	# Load the route with UDP datagram
	ns-udpsender -f 6 -D $dst_addr -p $DST_PORT -o -s 1452
	if [ $? -ne 0 ]; then
	    tst_resm TFAIL "Failed to run a UDP datagram sender"
	    return 1
	fi

	# Remove and reload the network driver
	rmmod $lhost_module && modprobe $lhost_module
	if [ $? -ne 0 ]; then
	    tst_resm TFAIL "Failed to unload/reload the network driver"
	    return 1
	fi

	# Make sure to assing the IPv6 address
	add_ipv6addr lhost ${LINK_NUM} ${IPV6_NETWORK} ${LHOST_IPV6_HOST} >/dev/null 2>&1

	cnt=`expr $cnt + 1`
    done
=======
	local cmd_type=$1
	local cmd_name="$(get_cmd $cmd_type)"
	local cnt=0
	local cmd cmd2

	if [ "$cmd_type" = 'ifconfig_cmd' ]; then
		cmd="$cmd_name $(tst_iface) down"
		cmd2="$cmd_name $(tst_iface) up"
	else
		cmd="$cmd_name link set down dev $(tst_iface)"
		cmd2="$cmd_name link set up dev $(tst_iface)"
	fi

	tst_resm TINFO "IPv4 route is added and deleted by '$cmd_name' command $NS_TIMES times"

	while [ $cnt -lt $NS_TIMES ]; do
		make_background_tcp_traffic $(tst_ipaddr_un_host)
		check_connectivity_interval $cnt false $(tst_iface) $(tst_ipaddr_un_host rhost)

		$cmd
		if [ $? -ne 0 ]; then
			tst_resm TFAIL "failed to down the interface"
			return
		fi
>>>>>>> network/stress: Fix and cleanup route IPv4 tests:testcases/network/stress/route/route4-ifdown

		$cmd2
		if [ $? -ne 0 ]; then
			tst_resm TFAIL "failed to up the interface"
			return
		fi

		cnt=$(($cnt + 1))
	done

	tst_resm TPASS "test is finished correctly"
}

do_setup
test_body 'ifconfig_cmd'
test_body 'ip_cmd'

tst_exit
